version: "3"
services:

  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes: []
      # - zoo_data:/var/lib/zookeeper/data
      # - zoo_log:/var/lib/zookeeper/log


  kafka:
    image: 'confluentinc/cp-kafka:latest'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - 9092:9092
    volumes: []
      # - kafka_data:/var/lib/kafka/data


  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8084:8084"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8084

  kconnect-s3sink:
    image: s3sink
    build: ./kafka-connect/
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - zookeeper 
      - schema-registry
    volumes:
      - $PWD/kafka-connect/aws_credentials:/root/.aws/credentials
      - $PWD/kafka-connect/aws_credentials:/home/appuser/.aws/credentials
      - $PWD/kafka-connect/connect-fieldandtime-partitioner-1.1.0-SNAPSHOT.jar:/usr/share/confluent-hub-components/confluentinc-kafka-connect-s3/lib/connect-fieldandtime-partitioner-1.1.0-SNAPSHOT.jar
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONNECT_REST_ADVERTISED_HOST_NAME: "s3sink"
      CONNECT_REST_PORT: "8083"
      CONNECT_GROUP_ID: "s3-sink-test"
      CONNECT_CONFIG_STORAGE_TOPIC: "__s3sink-config-storage"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: "10000"
      CONNECT_OFFSET_STORAGE_TOPIC: "__s3sink-offset-storage"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_TOPIC: "__s3sink-status-storage"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components'
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      AWS_ACCESS_KEY_ID: "minioadmin"
      AWS_SECRET_KEY: "minioadmin"



  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: server --console-address ":9001" /data

  # (optional) deploy flink job to the job-manager
  client: 
    image: flink:latest
    volumes:
      - $PWD/flink/flink-demo-assembly-0.1.jar:/opt/TestJob.jar
      - $PWD/flink/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
    working_dir: /opt/flink/bin
    command: "flink run -d /opt/TestJob.jar --checkpointing --event-time"
    depends_on:
      - jobmanager
      - taskmanager-1
      - kafka
      - minio
    

  jobmanager:
    image: flink:latest # java 11, scala 2.12, flink 1.18.1 
    ports:
      - "8081:8081"
      - "6123:6123"
    depends_on:
      - kafka
      - minio
    command: jobmanager
    volumes:
      # - flink_data:/tmp/
      - $PWD/flink/plugins/flink-s3-fs-hadoop-1.18.1.jar:/opt/flink/plugins/flink-s3-fs-hadoop/flink-s3-fs-hadoop-1.18.1.jar
      - $PWD/flink/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
    environment: 
      - S3_PATH_STYLE_ACCESS=true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2048M
          pids: 1000
        reservations:
          cpus: '1'
          memory: 2048M  

  taskmanager-1:
    image: flink:latest
    command: taskmanager
    volumes:
      # - flink_data:/tmp/
      - $PWD/flink/plugins/flink-s3-fs-hadoop-1.18.1.jar:/opt/flink/plugins/flink-s3-fs-hadoop/flink-s3-fs-hadoop-1.18.1.jar
      - $PWD/flink/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
    depends_on:
      - jobmanager
      - kafka
      - minio
    environment: 
      - S3_PATH_STYLE_ACCESS=true
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8000M
          pids: 1000
        reservations:
          cpus: '4'
          memory: 8000M     

  kafkactl:
    image: deviceinsight/kafkactl:latest
    command: tail -f /dev/null
    entrypoint: ["/bin/bash", "-c"]
    depends_on:
      - kafka
    volumes:
      - $PWD/extexample_file.jsonl:/example_file.jsonl
    environment:
      BROKERS: kafka:29092
    tty: true
  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    ports:
      - "8085:8080"
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_BROKERS: kafka:29092

volumes:
  minio_storage: {}
  flink_data: {}
  # kafka_data: {}
  # zoo_data: {}
  # zoo_log: {}


# docker volume rm flink-poc_minio_storage flink-poc_flink_data flink-poc_kafka_data flink-poc_zoo_data flink-poc_zoo_log
